#ifndef Event_h
#define Event_h

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <SimpleEngine/myImports.hpp>
////////////////////////////////////////////////////////////
namespace se
{
    ////////////////////////////////////////////////////////////
    /// This enum holds all different types of event
    ////////////////////////////////////////////////////////////
    enum EventCode
    {
        SF_EVENT, //Events that came from SFML framework (window, keyboard etc.)
    };

    ////////////////////////////////////////////////////////////
    /// Class that represent a framework Event
    /// It could be any framework event (from gui) or a wrapped SFML Event
    ////////////////////////////////////////////////////////////
    class SE_API Event
    {
        public:

        ////////////////////////////////////////////////////////////
        /// Constructors
        ////////////////////////////////////////////////////////////
        Event(EventCode code);
        //sets isSfEvent to true and wrap the parameter event
        Event(const sf::Event& sfevent);

        ////////////////////////////////////////////////////////////
        /// Get the wrapped SFML event
        /// \return wrapped sfml event, can be uninitialized, so you'd prefer
        /// call isSfEvent() before calling this method.
        ////////////////////////////////////////////////////////////
        const sf::Event& getSfEvent() const;

        ////////////////////////////////////////////////////////////
        /// Is the event a wrapped SFML Event
        /// \return true if the event is a wrapped SFML Event,
        /// when so, this event can be accessed by getSfEvent() method
        ////////////////////////////////////////////////////////////
        bool isSfEvent() const;

        private:

        ////////////////////////////////////////////////////////////
        /// Private data
        ////////////////////////////////////////////////////////////
        sf::Event mySfEvent; //inner sfml event, could be uninitialized
        const EventCode myCode; // event code
    };
}
#endif
